#!/usr/bin/env python3

import os
import glob
import envtpl
import sys
from mflog import get_logger
from mfext.plugins_common import get_plugin_parser, \
    get_plugin_name_from_plugin_home, set_plugin_env

MFMODULE_RUNTIME_HOME = os.environ["MFMODULE_RUNTIME_HOME"]
MFBASE_PLUGINS_HOME = os.path.join(MFMODULE_RUNTIME_HOME,
                                   "var", "plugins")
CONFIG = os.environ.get('MFCONFIG', 'GENERIC')
HOSTNAME = os.environ.get('MFCOM_HOSTNAME')
HOSTNAME_FULL = os.environ.get('MFCOM_HOSTNAME_FULL')
MFMODULE = os.environ['MFMODULE']

LOGGER = get_logger("__make_nginx_conf")


def get_conf(plugin_directory, plugin_name):
    plugin_conf = {}
    plugin_conf['directory'] = plugin_directory
    plugin_conf['name'] = plugin_name
    parser = get_plugin_parser(plugin_directory, plugin_name)
    plugin_conf['use_postgresql'] = "1"
    if parser.has_option('general', 'use_postgresql'):
        if parser.getint("general", "use_postgresql") == 0:
            plugin_conf['use_postgresql'] = "0"
    plugin_conf['use_storage'] = "1"
    if parser.has_option('general', 'use_storage'):
        if parser.getint("general", "use_storage") == 0:
            plugin_conf['use_storage'] = "0"
    return plugin_conf


plugins = []
if len(sys.argv) == 2:
    label_files = glob.glob(sys.argv[1] + "/.layerapi2_label")
else:
    label_files = glob.glob(MFBASE_PLUGINS_HOME + "/*/.layerapi2_label")
plugin_directories = [os.path.dirname(x) for x in label_files]
for plugin_dir in plugin_directories:
    plugin_name = get_plugin_name_from_plugin_home(plugin_dir)
    if plugin_name is None:
        LOGGER.warning("can't find plugin_name for "
                       "plugin_dir=%s => ignoring" % plugin_dir)
        continue
    saved_environ = os.environ.copy()
    set_plugin_env(plugin_dir, plugin_name)
    plugin_conf = get_conf(plugin_dir, plugin_name)
    os.environ = saved_environ
    if plugin_conf:
        plugins.append(plugin_conf)

nginx_conf_file = os.path.join(os.environ['MFMODULE_HOME'], 'config',
                               'nginx.conf')

with open(nginx_conf_file, "r") as f:
    extra_variables = {
        "PLUGINS": plugins
    }
    content = envtpl.render_string(f.read(), extra_variables=extra_variables,
                                   keep_multi_blank_lines=False)

print(content)
