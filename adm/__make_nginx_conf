#!/usr/bin/env python3

import os
import glob
import envtpl
import sys
from mflog import get_logger
from mfutil.plugins import layerapi2_label_to_plugin_name
from mfext.plugins_common import get_plugin_parser

MFMODULE_RUNTIME_HOME = os.environ["MFMODULE_RUNTIME_HOME"]
MFBASE_PLUGINS_HOME = os.path.join(MFMODULE_RUNTIME_HOME,
                                   "var", "plugins")
CONFIG = os.environ.get('MFCONFIG', 'GENERIC')
HOSTNAME = os.environ.get('MFCOM_HOSTNAME')
HOSTNAME_FULL = os.environ.get('MFCOM_HOSTNAME_FULL')
MFMODULE = os.environ['MFMODULE']

LOGGER = get_logger("__make_nginx_conf")


def get_conf(plugin_directory):
    plugin_conf = {}
    try:
        with open(os.path.join(plugin_directory,
                               ".layerapi2_label"), "r") as f:
            label = f.read().strip()
    except Exception:
        LOGGER.warning(
            "can't read %s/.layerapi2_label => ignoring this plugin",
            plugin_directory)
        return None
    try:
        plugin_name = layerapi2_label_to_plugin_name(label)
    except Exception as e:
        LOGGER.warning("can't read %s/.layerapi2_label with error: %s => "
                       "ignoring this plugin", plugin_directory, e)
        return None
    plugin_conf['directory'] = plugin_directory
    plugin_conf['name'] = plugin_name
    parser = get_plugin_parser(plugin_directory, plugin_name)
    plugin_conf['use_postgresql'] = "1"
    if parser.has_option('general', 'use_postgresql'):
        if parser.getint("general", "use_postgresql") == 0:
            plugin_conf['use_postgresql'] = "0"
    plugin_conf['use_storage'] = "1"
    if parser.has_option('general', 'use_storage'):
        if parser.getint("general", "use_storage") == 0:
            plugin_conf['use_storage'] = "0"
    plugin_conf['storage_access_allows'] = ['all']
    if parser.has_option('general', 'storage_access_allows'):
        plugin_conf['storage_access_allows'] = \
            parser.get('general', 'storage_access_allows').split(',')
    plugin_conf["storage_auth_passwd_filename"] = "null"
    if parser.has_option('general', "storage_auth_passwd_filename"):
        plugin_conf["storage_auth_passwd_filename"] = \
            parser.get('general', "storage_auth_passwd_filename")
    plugin_conf["storage_satisfy"] = "all"
    if parser.has_option('general', 'storage_satisfy'):
        tmp = parser.get('general', 'storage_satisfy')
        if tmp not in ('all', 'any'):
            LOGGER.warning(f"invalid value for storage_satisfy: {tmp} "
                           "=> must be any or all (ignoring it)")
        else:
            plugin_conf["storage_satisfy"] = tmp
    env_var = "MFBASE_NGINX_STORAGE_DAV_METHODS"
    dav_methods = \
        [x.strip().upper()
         for x in os.environ[env_var].replace(' ', ',').split(',')]
    if len(dav_methods) == 1 and dav_methods[0] == "NULL":
        dav_methods = []
    if parser.has_option('general', 'storage_forbidden_dav_methods'):
        tmp = parser.get('general', 'storage_forbidden_dav_methods')
        if tmp != "null":
            tmp = [x.strip().upper() for x in tmp.split(',')]
            for t in tmp:
                if t in dav_methods:
                    dav_methods.remove(t)
    plugin_conf["storage_dav_methods"] = " ".join(dav_methods)
    return plugin_conf


plugins = []
if len(sys.argv) == 2:
    label_files = glob.glob(sys.argv[1] + "/.layerapi2_label")
else:
    label_files = glob.glob(MFBASE_PLUGINS_HOME + "/*/.layerapi2_label")
plugin_directories = [os.path.dirname(x) for x in label_files]
for plugin_directory in plugin_directories:
    plugin_conf = get_conf(plugin_directory)
    if plugin_conf:
        plugins.append(plugin_conf)

nginx_conf_file = os.path.join(os.environ['MFMODULE_HOME'], 'config',
                               'nginx.conf')

with open(nginx_conf_file, "r") as f:
    extra_variables = {
        "PLUGINS": plugins
    }
    content = envtpl.render_string(f.read(), extra_variables=extra_variables,
                                   keep_multi_blank_lines=False)

print(content)
